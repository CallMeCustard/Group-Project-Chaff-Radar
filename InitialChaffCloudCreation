%Defines parameters
Number_Of_Strips = 1000;
Strip_Spacing = 4;
Widths = 0.05;
Lengths = 2;
Size_X = 1.5;
Size_Y = 2;
Size_Z = 1;
Scaled_Unit = 1;
%Defines a 3D vector space
V = @(x,y,z)[x,y,z];
%Calls function to create geometry of the chaff strips
geometry = setupGeometry(Number_Of_Strips, Strip_Spacing, Widths, Lengths, Size_X, Size_Y, Size_Z, Scaled_Unit,V);

positions = geometry(1:4:end,:); %Defines the positions of the chaff
neighbour_range = 2 * Strip_Spacing; %Defines the nearest neighbour range
density = zeros(Number_Of_Strips,1); %Defines the density matrix

for i = 1:Number_Of_Strips %For loop repeating for the number of fibres
    distances = sqrt(sum((positions - positions(i,:)).^2,2)); %Calculates the distance between one particle and the other particles.
    density(i) = sum(distances < neighbour_range)-1; %Calculates the density of chaff fibres within the nearest neighbour range
end

density_normalised = (density - min(density)) / (max(density) - min(density)); %Normalises the density
cmap = jet(256); %Creates a colour map
colormap(cmap);
figure;
hold on;
for i = 1:size(geometry, 1) / 4 %Repeats over geometry/4 as this is the numbver of fibres as each fibre has 4 points
    strip = geometry((i-1)*4+1:i*4,:); %Stores the geometry of the chaff
    color_idx = round(density_normalised(i)*255) +1; %Creates a colour index depending on the density
    line_color = cmap(color_idx,:); %Changes the line colour due to the colour index
    plot(strip(:,1),strip(:,2), '-','Color',line_color,'LineWidth',1); %Plots each chaff
end
title('Chaff Cloud Distribution'); %Defines title and axis label
xlabel('X Position (Scaled Units)');
ylabel('Y Position (Scaled Units)');
colorbar;
hold off;
%Creates animation of plot
max_spacing = 20; %Maximum distance between chaff
increment = 1; %Incremental increase in distance
fps = 1; %Frame rate of video
output_file = 'chaff_animation3.mp4'; %The file created after animation
video = VideoWriter(output_file, 'MPEG-4'); % Video writed to the output file and the type of file created
video.FrameRate = fps; %Creates frame rate
open(video); %Opens video


figure; %Creates figure with title and label
hold on;
title('Chaff Cloud Distribution');
xlabel('X Position (Scaled Units)');
ylabel('Y Position (Scaled Units)');
xlim([-40 40]); %Limits axis so the chaff cloud isn't changing size.
ylim([-40 40]);

for spacing = Strip_Spacing:increment:max_spacing %Iterates between intial spacing and max spacing in the increments set out
     geometry = setupGeometry(Number_Of_Strips, spacing, Widths, Lengths, Size_X, Size_Y, Size_Z, Scaled_Unit,V); %Calculates the geometry of the chaff strips
     cla;
     for i = 1:size(geometry,1) / 4 %Iterates through the number of chaff
         strip = geometry((i-1)*4+1:i*4,:); %Stores the geometrical points of the chaff fibres
         plot(strip(:, 1), strip(:, 2), '-'); %Plots the chaff cloud at each spacing
     end
     frame = getframe(gcf); %Creates a frame out of the plot
     writeVideo(video,frame); %Adds this frame to the video
     drawnow;
end
close(video); %Ends video and creates the output
hold off; 



function strips = setupGeometry(Number_Of_Strips, Strip_Spacing, Widths, Lengths, Size_X, Size_Y, Size_Z, Scaled_Unit,V) %Creates a funciton that calculates the geometry of the chaff fibres
    strips = [];
    for i = 1:Number_Of_Strips %Iterates through the number of strips
        x = randi([0, 2 * Strip_Spacing * Size_X]) - Strip_Spacing * Size_X; %Defines the x coordinate
        y = randi([0, 2 * Strip_Spacing * Size_Y]) - Strip_Spacing * Size_Y; %Defines the y cooridinate
        z = randi([0, 2 * Strip_Spacing * Size_Z]) - Strip_Spacing * Size_Z; %Defines the z coordinate
        ang = randi([0,360]);

        p1 = V(x,y,z) * Scaled_Unit; %Creates the first vortex coordinate
        p2 = V(x + Widths * sind(ang), y-Widths * cosd(ang), z) * Scaled_Unit; %Creates the second vortex coordinate
        p3 = V(x + Widths * sind(ang) + Lengths *cosd(ang), y-Widths * cosd(ang) + Lengths * sind(ang), z) * Scaled_Unit; %Creates the third vortex coordinate
        p4 = V(x + Lengths * cosd(ang), y+Lengths * sind(ang), z) * Scaled_Unit; %Creates the fourth vortex coordinate

        strip = [p1; p2; p3; p4]; %Compiles all coordinates of fibre
        strips = [strips; strip]; %Appends coordinates to the strip array
    end
end
